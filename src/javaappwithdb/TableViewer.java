/*
 *
 * Main frame for searching and displaying results
 * Future possibilities:
 * 1. display the show image in the table
 * 2. editable columns for data edition
 * 3. clickable urls
 *
 */
package javaappwithdb;
import java.sql.*;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JSlider;
import net.proteanit.sql.DbUtils;

public class TableViewer extends javax.swing.JFrame {

    sqlConnection sqlConn = null;
    ResultSet rs = null;
    
    /**
     * Creates new form TableViewer
     */
    public TableViewer() {
        initComponents();
        //UpdateTableWithShow("The Big Bang Theory");
        FillCombo_show_name();
        FillCombo_season();
        FillCombo_number();
        FillCombo_network();
        FillCombo_genre();
        FillCombo_premiered();
        FillCombo_schedule_day();
        
    }

    /**
     * generated code
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this part. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        combo_show_name = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        combo_season = new javax.swing.JComboBox<>();
        combo_number = new javax.swing.JComboBox<>();
        combo_network = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        combo_genre = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        combo_premiered = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        combo_schedule_day = new javax.swing.JComboBox<>();
        toggle_status = new javax.swing.JToggleButton();
        jLabel10 = new javax.swing.JLabel();
        button_insert = new javax.swing.JButton();
        button_delete = new javax.swing.JButton();
        spinner_rating = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("TV Show Database");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel1.setText("Welcome to the TV Show Database");

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel2.setText(" TV show");

        combo_show_name.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo_show_name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_show_nameActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel3.setText("Season");

        jLabel4.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel4.setText("Number");

        combo_season.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo_season.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_seasonActionPerformed(evt);
            }
        });

        combo_number.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo_number.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_numberActionPerformed(evt);
            }
        });

        combo_network.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo_network.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_networkActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel5.setText("Network");

        combo_genre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo_genre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_genreActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel6.setText("Genre");

        jLabel7.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel7.setText("Rating ");

        combo_premiered.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo_premiered.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_premieredActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel8.setText("Premiered Year");

        jLabel9.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel9.setText("Schedule Day");

        combo_schedule_day.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo_schedule_day.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_schedule_dayActionPerformed(evt);
            }
        });

        toggle_status.setText("Running");
        toggle_status.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggle_statusActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel10.setText("Status");

        button_insert.setText("Add new Episode");
        button_insert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_insertActionPerformed(evt);
            }
        });

        button_delete.setText("Delete An Episode");
        button_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_deleteActionPerformed(evt);
            }
        });

        spinner_rating.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinner_ratingStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(10, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(11, 11, 11))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(combo_number, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel4)))
                                .addGap(18, 18, 18))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel5)
                                            .addComponent(jLabel6))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1035, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(combo_season, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(combo_show_name, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(button_delete, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(button_insert, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGap(9, 9, 9)
                                        .addComponent(jLabel10)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel7))
                                    .addComponent(combo_network, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(combo_genre, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(6, 6, 6)
                                                .addComponent(jLabel8))
                                            .addComponent(combo_premiered, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(combo_schedule_day, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(toggle_status)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(spinner_rating, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(7, 7, 7)))
                        .addGap(1052, 1052, 1052))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(combo_show_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(combo_season, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(combo_number, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(combo_network, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(combo_genre, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(combo_premiered, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(combo_schedule_day, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jLabel7))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinner_rating, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toggle_status))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 153, Short.MAX_VALUE)
                .addComponent(button_delete)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(button_insert)
                .addGap(25, 25, 25))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    ////////////////////////////////////////////////////////////////////////////
    ///////////////////////// Check user input conditions //////////////////////
    /////////////////////// Perform corresponding searches /////////////////////
    ////////////////////////////////////////////////////////////////////////////
    
    private void combo_show_nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_show_nameActionPerformed
        // TODO add your handling code here:
        String tmp = (String)combo_show_name.getSelectedItem();
        if (tmp == null) { 
            // do nothing
        }
        else if (tmp.equalsIgnoreCase("all shows")) {
            UpdateTableWithAllShows();
        }
        else {
            UpdateTableWithShow(tmp);
        }
    }//GEN-LAST:event_combo_show_nameActionPerformed

    private void combo_seasonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_seasonActionPerformed
        // TODO add your handling code here:
        String tmp_show = (String) combo_show_name.getSelectedItem();
        String tmp_season = (String) combo_season.getSelectedItem();
        try {
            if (tmp_season == null) {
                // do nothing
            } else if (tmp_show.equalsIgnoreCase("all shows") && 
                    tmp_season.equalsIgnoreCase("all seasons")) {
                UpdateTableWithAllEpisodes();
                
            } else if (!tmp_show.equalsIgnoreCase("all shows") && 
                    tmp_season.equalsIgnoreCase("all seasons")) {
                UpdateTableWithEpisodes(tmp_show);
                
            } else if (tmp_show.equalsIgnoreCase("all shows") && 
                    !tmp_season.equalsIgnoreCase("all seasons")) {
                UpdateTableWithCertainSeason(tmp_season);
                
            } else {
                UpdateTableWithASeason(tmp_show, tmp_season);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_combo_seasonActionPerformed

    private void combo_numberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_numberActionPerformed
        // TODO add your handling code here:
        String tmp_show = (String) combo_show_name.getSelectedItem();
        String tmp_season = (String) combo_season.getSelectedItem();
        String tmp_number = (String) combo_number.getSelectedItem();
        try {
            if (tmp_number == null) {
                // do nothing
            } 
            else if (tmp_show.equalsIgnoreCase("all shows") && 
                    tmp_season.equalsIgnoreCase("all seasons") && 
                    tmp_number.equalsIgnoreCase("all episodes")) {
                UpdateTableWithAllEpisodes();
            } 
            else if (!tmp_show.equalsIgnoreCase("all shows") && 
                    tmp_season.equalsIgnoreCase("all seasons") && 
                    tmp_number.equalsIgnoreCase("all episodes")) {
                UpdateTableWithEpisodes(tmp_show);
            } 
            else if (!tmp_show.equalsIgnoreCase("all shows") &&
                    !tmp_season.equalsIgnoreCase("all seasons") && 
                    tmp_number.equalsIgnoreCase("all episodes")) {
                UpdateTableWithASeason(tmp_show, tmp_season);
            } 
            else if (tmp_show.equalsIgnoreCase("all shows") &&
                     tmp_season.equalsIgnoreCase("all seasons") && 
                    !tmp_number.equalsIgnoreCase("all episodes")) {
                UpdateTableWithCertainNumber(tmp_number);
            }
            else if (tmp_show.equalsIgnoreCase("all shows") &&
                    !tmp_season.equalsIgnoreCase("all seasons") && 
                    tmp_number.equalsIgnoreCase("all episodes")) {
                UpdateTableWithCertainSeason(tmp_season);
            }
            else if (!tmp_show.equalsIgnoreCase("all shows") &&
                    tmp_season.equalsIgnoreCase("all seasons") && 
                    !tmp_number.equalsIgnoreCase("all episodes")) {
                UpdateTableWithCertainNumberOfShow(tmp_show, tmp_number);
            }
            else if (tmp_show.equalsIgnoreCase("all shows") &&
                    !tmp_season.equalsIgnoreCase("all seasons") && 
                    !tmp_number.equalsIgnoreCase("all episodes")) {
                UpdateTableWithCertainSeasonAndNumber(tmp_season, tmp_number);
            }
            else {
                UpdateTableWithAnEp(tmp_show, tmp_season, tmp_number);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_combo_numberActionPerformed

    private void combo_networkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_networkActionPerformed
        // TODO add your handling code here:
        String tmp_genre = (String) combo_genre.getSelectedItem();
        String tmp_show = (String) combo_show_name.getSelectedItem();
        String tmp_season = (String) combo_season.getSelectedItem();
        String tmp_number = (String) combo_number.getSelectedItem();
        String tmp_network = (String) combo_network.getSelectedItem();

        try {
            if (tmp_network == null) {
                // do nothing

            } else if (tmp_show.equalsIgnoreCase("all shows")
                    && tmp_season.equalsIgnoreCase("all seasons")
                    && tmp_number.equalsIgnoreCase("all episodes")
                    && tmp_genre.equalsIgnoreCase("select a genre")
                    && tmp_network.equalsIgnoreCase("select a network")) {
                UpdateTableWithAllEpisodes();
            
            } else {
                UpdateTableWithNetwork(tmp_network);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
        
    }//GEN-LAST:event_combo_networkActionPerformed

    private void button_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_deleteActionPerformed
        // TODO add your handling code here:
        JFrame deletionViewer = new DeletionViewer();
        deletionViewer.setVisible(true);
    }//GEN-LAST:event_button_deleteActionPerformed

    private void button_insertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_insertActionPerformed
        // TODO add your handling code here:
        JFrame insertionViewer = new InsertionViewer();
        insertionViewer.setVisible(true);
    }//GEN-LAST:event_button_insertActionPerformed

    private void combo_genreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_genreActionPerformed
        // TODO add your handling code here:
        String tmp_genre = (String) combo_genre.getSelectedItem();
        String tmp_show = (String) combo_show_name.getSelectedItem();
        String tmp_season = (String) combo_season.getSelectedItem();
        String tmp_number = (String) combo_number.getSelectedItem();
        
        try {
            if (tmp_genre == null) {
                // do nothing
                
            } else if (tmp_show.equalsIgnoreCase("all shows") && 
                    tmp_season.equalsIgnoreCase("all seasons") && 
                    tmp_number.equalsIgnoreCase("all episodes") && 
                    tmp_genre.equalsIgnoreCase("select a genre") ) {
                UpdateTableWithAllEpisodes();
            } else if (tmp_show.equalsIgnoreCase("all shows") && 
                    tmp_genre.equalsIgnoreCase("all genres")) {
                UpdateTableWithAllGenre_Show();
            
            } else if (!tmp_show.equalsIgnoreCase("all shows") && 
                    tmp_genre.equalsIgnoreCase("all genres")) {
                UpdateTableWithMultiGenre_OneShow(tmp_show);
            
            } else {
                UpdateTableWithGenre_Show(tmp_genre);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_combo_genreActionPerformed

    private void combo_premieredActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_premieredActionPerformed
        // TODO add your handling code here:
        String tmp_genre = (String) combo_genre.getSelectedItem();
        String tmp_show = (String) combo_show_name.getSelectedItem();
        String tmp_season = (String) combo_season.getSelectedItem();
        String tmp_number = (String) combo_number.getSelectedItem();
        String tmp_network = (String) combo_network.getSelectedItem();
        String tmp_premiered = (String) combo_premiered.getSelectedItem();

        try {
            if (tmp_premiered == null) {
                // do nothing

            } else if (tmp_show.equalsIgnoreCase("all shows")
                    && tmp_season.equalsIgnoreCase("all seasons")
                    && tmp_number.equalsIgnoreCase("all episodes")
                    && tmp_genre.equalsIgnoreCase("select a genre")
                    && tmp_network.equalsIgnoreCase("select a network")
                    && tmp_premiered.equalsIgnoreCase("select a date")) {
                UpdateTableWithAllEpisodes();
            
            } else {
                UpdateTableWithPremiered(tmp_premiered);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_combo_premieredActionPerformed

    private void combo_schedule_dayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_schedule_dayActionPerformed
        // TODO add your handling code here:
        String tmp_genre = (String) combo_genre.getSelectedItem();
        String tmp_show = (String) combo_show_name.getSelectedItem();
        String tmp_season = (String) combo_season.getSelectedItem();
        String tmp_number = (String) combo_number.getSelectedItem();
        String tmp_network = (String) combo_network.getSelectedItem();
        String tmp_premiered = (String) combo_premiered.getSelectedItem();
        String tmp_schedule_day = (String) combo_schedule_day.getSelectedItem();

        try {
            if (tmp_schedule_day == null) {
                // do nothing

            } else if (tmp_show.equalsIgnoreCase("all shows")
                    && tmp_season.equalsIgnoreCase("all seasons")
                    && tmp_number.equalsIgnoreCase("all episodes")
                    && tmp_genre.equalsIgnoreCase("select a genre")
                    && tmp_network.equalsIgnoreCase("select a network")
                    && tmp_premiered.equalsIgnoreCase("select a date")
                    && tmp_schedule_day.equalsIgnoreCase("select a schedule")) {
                UpdateTableWithAllEpisodes();
            
            } else {
                UpdateTableWithSchedule(tmp_schedule_day);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_combo_schedule_dayActionPerformed

    private void toggle_statusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggle_statusActionPerformed
        // TODO add your handling code here:
        String tmp_genre = (String) combo_genre.getSelectedItem();
        String tmp_show = (String) combo_show_name.getSelectedItem();
        String tmp_season = (String) combo_season.getSelectedItem();
        String tmp_number = (String) combo_number.getSelectedItem();
        String tmp_network = (String) combo_network.getSelectedItem();
        String tmp_premiered = (String) combo_premiered.getSelectedItem();
        String tmp_schedule_day = (String) combo_schedule_day.getSelectedItem();
        
        try {
            if (tmp_schedule_day == null) {
                // do nothing

            } else if (tmp_show.equalsIgnoreCase("all shows")
                    && tmp_season.equalsIgnoreCase("all seasons")
                    && tmp_number.equalsIgnoreCase("all episodes")
                    && tmp_genre.equalsIgnoreCase("select a genre")
                    && tmp_network.equalsIgnoreCase("select a network")
                    && tmp_premiered.equalsIgnoreCase("select a date")
                    && tmp_schedule_day.equalsIgnoreCase("select a schedule")
                    && !toggle_status.isSelected()) {
                UpdateTableWithAllEpisodes();

            } else {
                if (toggle_status.isSelected()) {
                    UpdateTableWithStatus("Running");
   
                } else {
                    UpdateTableWithStatusNotRunning();
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
        
    }//GEN-LAST:event_toggle_statusActionPerformed

    private void spinner_ratingStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinner_ratingStateChanged
        // TODO add your handling code here:
        String tmp_rating = "" + spinner_rating.getValue();
        String tmp_genre = (String) combo_genre.getSelectedItem();
        String tmp_show = (String) combo_show_name.getSelectedItem();
        String tmp_season = (String) combo_season.getSelectedItem();
        String tmp_number = (String) combo_number.getSelectedItem();
        String tmp_network = (String) combo_network.getSelectedItem();
        String tmp_premiered = (String) combo_premiered.getSelectedItem();
        String tmp_schedule_day = (String) combo_schedule_day.getSelectedItem();
        
        try {
            if (tmp_rating == null) {
                // do nothing

            } else if (tmp_show.equalsIgnoreCase("all shows")
                    && tmp_season.equalsIgnoreCase("all seasons")
                    && tmp_number.equalsIgnoreCase("all episodes")
                    && tmp_genre.equalsIgnoreCase("select a genre")
                    && tmp_network.equalsIgnoreCase("select a network")
                    && tmp_premiered.equalsIgnoreCase("select a date")
                    && tmp_schedule_day.equalsIgnoreCase("select a schedule")
                    && tmp_rating.equalsIgnoreCase("0")) {
                UpdateTableWithAllEpisodes();

            } else {
                UpdateTableWithRatingLargerThan(tmp_rating);
                System.out.println(tmp_rating);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_spinner_ratingStateChanged

    ////////////////////////////////////////////////////////////////////////////
    /////////////////////// end of condition checking methods //////////////////
    ////////////////////////////////////////////////////////////////////////////
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TableViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TableViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TableViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TableViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TableViewer().setVisible(true);
            }
        });
    }
    
    
    
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////// populate the UI components //////////////////////
    ////////////////////////////////////////////////////////////////////////////
    private void FillCombo_show_name() {
        String sql = "SELECT id, name, type, language, status, runtime, "
                + " premiered, schedule_day, rating FROM Shows";

        try (Connection conn = sqlConnection.connect();
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery(sql)) {
            
            combo_show_name.removeAllItems();
            combo_show_name.addItem("All shows");
            while (rs.next()) {
                String col_name = rs.getString("name");
                combo_show_name.addItem(col_name);
            }

        } catch (SQLException e) {
            System.out.println(e.getMessage());

        }
    }
    
    private void FillCombo_season() {
        combo_season.removeAllItems();
        
        combo_season.addItem("All seasons");
        for (int i = 1; i <= 21; i++) {
            String tmp = "" + i;
            combo_season.addItem(tmp);
        }
    }
    
    private void FillCombo_number() {
        combo_number.removeAllItems();
        
        combo_number.addItem("All episodes");
        for (int i = 1; i <= 24; i++) {
            String tmp = "" + i;
            combo_number.addItem(tmp);
        }
    }
    
    private void FillCombo_network() {
        String sql = "SELECT id, name, country_code "
                + "FROM Networks";

        try (Connection conn = sqlConnection.connect();
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery(sql)) {
            
            combo_network.removeAllItems();
            combo_network.addItem("Select a network");
     
            while (rs.next()) {
                String col_name = rs.getString("name");
                combo_network.addItem(col_name);
            }

        } catch (SQLException e) {
            System.out.println(e.getMessage());

        }
    }
    
    private void FillCombo_genre() {
        String sql = "SELECT id, genre_name "
                + "FROM Genres";

        try (Connection conn = sqlConnection.connect();
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery(sql)) {
            
            combo_genre.removeAllItems();
            combo_genre.addItem("Select a genre");
            combo_genre.addItem("All genres");
            while (rs.next()) {
                String col_name = rs.getString("genre_name");
                combo_genre.addItem(col_name);
            }

        } catch (SQLException e) {
            System.out.println(e.getMessage());

        }
    }
    
    private void FillCombo_premiered() {
        String sql = "SELECT premiered "
                + "FROM Shows ORDER BY premiered";

        try (Connection conn = sqlConnection.connect();
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery(sql)) {
            
            combo_premiered.removeAllItems();
            combo_premiered.addItem("Select a date");
            //combo_premiered.addItem("All dates");
            while (rs.next()) {
                String col_name = rs.getString("premiered");
                combo_premiered.addItem(col_name);
            }

        } catch (SQLException e) {
            System.out.println(e.getMessage());

        }
    }
    
    private void FillCombo_schedule_day() {
        combo_schedule_day.removeAllItems();
        combo_schedule_day.addItem("Select a schedule");
        //combo_schedule_day.addItem("All schedules");
        combo_schedule_day.addItem("Sunday");
        combo_schedule_day.addItem("Monday");
        combo_schedule_day.addItem("Tuesday");
        combo_schedule_day.addItem("Wednesday");
        combo_schedule_day.addItem("Thursday");
        combo_schedule_day.addItem("Friday");
        combo_schedule_day.addItem("Saturday");
            
    }
    
    ////////////////////////////////////////////////////////////////////////////
    //////////////////////////// End of population /////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    
    ////////////////////////////////////////////////////////////////////////////
    ///////////////////////// Refresh table with query results /////////////////
    ////////////////////////////////////////////////////////////////////////////
    
    public void UpdateTableWithAllEpisodes() {
        String sql = "SELECT Episodes.name, Episodes.show_id, Shows.name AS show_name,"
                + "Episodes.season, Episodes.number, Episodes.summary "
                + "FROM Episodes, Shows "
                + "Where Episodes.show_id = Shows.id";

        try (Connection conn = sqlConn.connect();
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery(sql)) {

            jTable1.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }
    
    public void UpdateTableWithEpisodes(String show_name) {
        String sql = "SELECT Episodes.name, Episodes.show_id, Shows.name AS show_name,"
                + "Episodes.season, Episodes.number, Episodes.summary "
                + "FROM Shows, Episodes "
                + "WHERE Episodes.show_id = Shows.id and Shows.name = ?";

        try (Connection conn = sqlConnection.connect();
                PreparedStatement pstmt = conn.prepareStatement(sql)) {

            // set the value
            pstmt.setString(1, show_name);
            //
            ResultSet rs = pstmt.executeQuery();

            jTable1.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }
    
    public void UpdateTableWithASeason(String show_name, String season) {
        String sql = "SELECT Episodes.name, Episodes.show_id, Shows.name AS show_name,"
                + "Episodes.season, Episodes.number, Episodes.summary "
                + "FROM Shows, Episodes "
                + "WHERE Episodes.show_id = Shows.id and Shows.name = ? "
                + "and Episodes.season = ?";

        try (Connection conn = sqlConnection.connect();
                PreparedStatement pstmt = conn.prepareStatement(sql)) {

            // set the value
            pstmt.setString(1, show_name);
            pstmt.setString(2, season);
            //
            ResultSet rs = pstmt.executeQuery();

            jTable1.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }
    
    public void UpdateTableWithAnEp(String show_name, String season, String number) {
        String sql = "SELECT Episodes.name, Episodes.show_id, Shows.name AS show_name,"
                + "Episodes.season, Episodes.number, Episodes.summary "
                + "FROM Shows, Episodes "
                + "WHERE Episodes.show_id = Shows.id and Shows.name = ? "
                + "and Episodes.season = ? and Episodes.number = ?";

        try (Connection conn = sqlConnection.connect();
                PreparedStatement pstmt = conn.prepareStatement(sql)) {

            // set the value
            pstmt.setString(1, show_name);
            pstmt.setString(2, season);
            pstmt.setString(3, number);
            //
            ResultSet rs = pstmt.executeQuery();

            jTable1.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }
    
    public void UpdateTableWithCertainNumber(String number) {
        String sql = "SELECT Episodes.name, Episodes.show_id, Shows.name AS show_name, "
                + "Episodes.season, Episodes.number, Episodes.summary "
                + "FROM Episodes, Shows "
                + "WHERE Shows.id = Episodes.show_id and Episodes.number = ?";

        try (Connection conn = sqlConnection.connect();
                PreparedStatement pstmt = conn.prepareStatement(sql)) {

            // set the value
            pstmt.setString(1, number);
            //
            ResultSet rs = pstmt.executeQuery();

            jTable1.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }
    
    public void UpdateTableWithCertainNumberOfShow(String show_name, String number) {
        String sql = "SELECT Episodes.name, Episodes.show_id, Shows.name AS show_name, "
                + "Episodes.season, Episodes.number, Episodes.summary "
                + "FROM Episodes, Shows "
                + "WHERE Shows.id = Episodes.show_id and "
                + "Shows.name = ? and Episodes.number = ?";

        try (Connection conn = sqlConnection.connect();
                PreparedStatement pstmt = conn.prepareStatement(sql)) {

            // set the value
            pstmt.setString(1, show_name);
            pstmt.setString(2, number);
            //
            ResultSet rs = pstmt.executeQuery();

            jTable1.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }
    
    public void UpdateTableWithCertainSeason (String season) {
        String sql = "SELECT Episodes.name, Episodes.show_id, Shows.name AS show_name, "
                + "Episodes.season, Episodes.number, Episodes.summary "
                + "FROM Episodes, Shows "
                + "WHERE Shows.id = Episodes.show_id and Episodes.season = ?";

        try (Connection conn = sqlConnection.connect();
                PreparedStatement pstmt = conn.prepareStatement(sql)) {

            // set the value
            
            pstmt.setString(1, season);

            ResultSet rs = pstmt.executeQuery();

            jTable1.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }
    
    public void UpdateTableWithCertainSeasonAndNumber(String season, String number) {
        String sql = "SELECT Episodes.name, Episodes.show_id, Shows.name AS show_name,"
                + "Episodes.season, Episodes.number, Episodes.summary "
                + "FROM Shows, Episodes "
                + "WHERE Episodes.show_id = Shows.id "
                + "and Episodes.season = ? and Episodes.number = ?";

        try (Connection conn = sqlConnection.connect();
                PreparedStatement pstmt = conn.prepareStatement(sql)) {

            // set the value
            pstmt.setString(1, season);
            pstmt.setString(2, number);
            //
            ResultSet rs = pstmt.executeQuery();

            jTable1.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }
    
    public void UpdateTableWithShow(String show_name) {
        String sql = "SELECT id, name, type, language, status, runtime, "
                + " premiered, schedule_day, rating FROM Shows where name = ?";

        try (Connection conn = sqlConn.connect();
                PreparedStatement pstmt = conn.prepareStatement(sql)) {

            // set the value
            pstmt.setString(1, show_name);
            //
            ResultSet rs = pstmt.executeQuery();
            
            jTable1.setModel(DbUtils.resultSetToTableModel(rs));

        } catch (SQLException e) {
            System.out.println(e.getMessage());

        }
    }
    
    public void UpdateTableWithAllShows() {
        String sql = "SELECT id, name, type, language, status, runtime, "
                + " premiered, schedule_day, rating FROM Shows";

        try (Connection conn = sqlConn.connect();
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery(sql)) {

            jTable1.setModel(DbUtils.resultSetToTableModel(rs));

        } catch (SQLException e) {
            System.out.println(e.getMessage());

        }
    }
    
    public void UpdateTableWithGenre_Show(String genre_name) {
        String sql = "SELECT Shows.id, Shows.name, Genres.genre_name, Genres.id "
                + "FROM Shows, Genres, Genre_Show  WHERE Shows.id = "
                + "Genre_Show.show_id and Genres.id = Genre_Show.genre_id "
                + "and genre_name = ?";

        try (Connection conn = sqlConn.connect();
                PreparedStatement pstmt = conn.prepareStatement(sql)) {

            // set the value
            pstmt.setString(1, genre_name);
            //
            ResultSet rs = pstmt.executeQuery();

            jTable1.setModel(DbUtils.resultSetToTableModel(rs));

        } catch (SQLException e) {
            System.out.println(e.getMessage());

        }
    }
    
    public void UpdateTableWithAllGenre_Show() {
        String sql = "SELECT Shows.id, Shows.name, Genres.genre_name, Genres.id "
                + "FROM Shows, Genres, Genre_Show"
                + "WHERE Shows.id = "
                + "Genre_Show.show_id and Genres.id = Genre_Show.genre_id";

        try (Connection conn = sqlConn.connect();
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery(sql)) {

            jTable1.setModel(DbUtils.resultSetToTableModel(rs));

        } catch (SQLException e) {
            System.out.println(e.getMessage());

        }
    }
    
    public void UpdateTableWithMultiGenre_OneShow(String show_name) {
        String sql = "SELECT Shows.id, Shows.name, Genres.genre_name, Genres.id "
                + "FROM Shows, Genres, Genre_Show "
                + "WHERE Shows.id = "
                + "Genre_Show.show_id and Genres.id = Genre_Show.genre_id "
                + "and Shows.name = ?";

        try (Connection conn = sqlConn.connect();
                PreparedStatement pstmt = conn.prepareStatement(sql)) {

            // set the value
            pstmt.setString(1, show_name);
            //
            ResultSet rs = pstmt.executeQuery();

            jTable1.setModel(DbUtils.resultSetToTableModel(rs));

        } catch (SQLException e) {
            System.out.println(e.getMessage());

        }
    }
    
    /*
    public void UpdateTableWithAllNetwork_Show() {
        String sql = "SELECT Shows.id AS show_id, Shows.name AS show_name, "
                + "Networks.id AS network_id, Networks.name AS network_name, "
                + "Networks.country_code, Countries.name AS country_name, "
                + "Countries.timezone "
                + "FROM Shows, Networks, Countries "
                + "WHERE Shows.network_id = Networks.id and "
                + "Networks.country_code = Countries.code";

        try (Connection conn = sqlConn.connect();
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery(sql)) {

            jTable1.setModel(DbUtils.resultSetToTableModel(rs));

        } catch (SQLException e) {
            System.out.println(e.getMessage());

        }
    }
    */
    
    public void UpdateTableWithNetwork(String network) {
        String sql = "SELECT Shows.id AS show_id, Shows.name AS show_name, "
                + "Networks.id AS network_id, Networks.name AS network_name, "
                + "Networks.country_code, Countries.name AS country_name, "
                + "Countries.timezone "
                + "FROM Shows, Networks, Countries "
                + "WHERE Shows.network_id = Networks.id and "
                + "Networks.country_code = Countries.code and "
                + "Networks.name = ?";

        try (Connection conn = sqlConn.connect();
                PreparedStatement pstmt = conn.prepareStatement(sql)) {

            // set the value
            pstmt.setString(1, network);
            //
            ResultSet rs = pstmt.executeQuery();

            jTable1.setModel(DbUtils.resultSetToTableModel(rs));

        } catch (SQLException e) {
            System.out.println(e.getMessage());

        }
    }
    
    public void UpdateTableWithPremiered(String premiered) {
        String sql = "SELECT name, premiered "
                + "FROM Shows "
                + "WHERE premiered = ?";

        try (Connection conn = sqlConn.connect();
                PreparedStatement pstmt = conn.prepareStatement(sql)) {

            // set the value
            pstmt.setString(1, premiered);
            //
            ResultSet rs = pstmt.executeQuery();

            jTable1.setModel(DbUtils.resultSetToTableModel(rs));

        } catch (SQLException e) {
            System.out.println(e.getMessage());

        }
    }
    
    public void UpdateTableWithSchedule(String schedule_day) {
        String sql = "SELECT name, schedule_day "
                + "FROM Shows "
                + "WHERE schedule_day = ?";

        try (Connection conn = sqlConn.connect();
                PreparedStatement pstmt = conn.prepareStatement(sql)) {

            // set the value
            pstmt.setString(1, schedule_day);
            //
            ResultSet rs = pstmt.executeQuery();

            jTable1.setModel(DbUtils.resultSetToTableModel(rs));

        } catch (SQLException e) {
            System.out.println(e.getMessage());

        }
    }
    
    public void UpdateTableWithStatus(String status) {
        String sql = "SELECT name, schedule_day, status "
                + "FROM Shows "
                + "WHERE status = ?";

        try (Connection conn = sqlConn.connect();
                PreparedStatement pstmt = conn.prepareStatement(sql)) {

            // set the value
            pstmt.setString(1, status);
            //
            ResultSet rs = pstmt.executeQuery();

            jTable1.setModel(DbUtils.resultSetToTableModel(rs));

        } catch (SQLException e) {
            System.out.println(e.getMessage());

        }
    }
    
    public void UpdateTableWithStatusNotRunning() {
        String sql = "SELECT name, schedule_day, status "
                + "FROM Shows "
                + "WHERE status != \"Running\" ";

        try (Connection conn = sqlConn.connect();
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery(sql)) {

            jTable1.setModel(DbUtils.resultSetToTableModel(rs));

        } catch (SQLException e) {
            System.out.println(e.getMessage());

        }
    }
    
    public void UpdateTableWithRatingLargerThan(String rating) {
         String sql = "SELECT name, rating FROM Shows WHERE rating >= ?";
        
        try (Connection conn = sqlConn.connect();
                PreparedStatement pstmt = conn.prepareStatement(sql)) {

            // set the value
            pstmt.setString(1, rating);
            //
            ResultSet rs = pstmt.executeQuery();

            jTable1.setModel(DbUtils.resultSetToTableModel(rs));

        } catch (SQLException e) {
            System.out.println(e.getMessage());

        }
    }
    
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////// End of JTable refreshing ////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_delete;
    private javax.swing.JButton button_insert;
    private javax.swing.JComboBox<String> combo_genre;
    private javax.swing.JComboBox<String> combo_network;
    private javax.swing.JComboBox<String> combo_number;
    private javax.swing.JComboBox<String> combo_premiered;
    private javax.swing.JComboBox<String> combo_schedule_day;
    private javax.swing.JComboBox<String> combo_season;
    private javax.swing.JComboBox<String> combo_show_name;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JSpinner spinner_rating;
    private javax.swing.JToggleButton toggle_status;
    // End of variables declaration//GEN-END:variables
}
