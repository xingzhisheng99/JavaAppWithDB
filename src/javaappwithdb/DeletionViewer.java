/*
 *
 * Secondary frame for deletion
 * Currently supporting the deletion of exsiting episodes
 * One entry per deletion execution
 * Future possibilities:
 * 1. bulk deletion
 * 2. completely deleting a show
 * 3. refreshing the mainframe directly after the deletion
 *
 */

/**
 *
 * @author Yishuo
 */
package javaappwithdb;

import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import net.proteanit.sql.DbUtils;


public class DeletionViewer extends javax.swing.JFrame {

    /**
     * Creates new form DeletionViewer
     */
    public DeletionViewer() {
        initComponents();
        FillCombo_show_name();
        FillCombo_season();
        FillCombo_number();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        combo_season = new javax.swing.JComboBox<>();
        combo_number = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        combo_show_name = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        button_delete = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Delete An Entry");

        jLabel1.setText("Season");

        jLabel2.setText("Episode #");

        combo_season.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        combo_number.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel3.setText("Show Name");

        combo_show_name.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        button_delete.setText("Delete");
        button_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_deleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addGap(15, 15, 15))))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(combo_show_name, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(combo_season, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(combo_number, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(162, Short.MAX_VALUE)
                .addComponent(button_delete)
                .addGap(156, 156, 156))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(combo_show_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(combo_season, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(combo_number, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addComponent(button_delete)
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    ////////////////////////////////////////////////////////////////////////////
    ////////// Check input conditions when the button is clicked ///////////////
    ////////////////////////////////////////////////////////////////////////////
    private void button_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_deleteActionPerformed
        // TODO add your handling code here:
        String tmp_show_name = (String) combo_show_name.getSelectedItem();
        String tmp_season = (String) combo_season.getSelectedItem();
        String tmp_number = (String) combo_number.getSelectedItem();

        // fetch the ep name and the show id
        String tmp_episode_name = null;
        String tmp_show_id = null;
        //String tmp_episode_id = null;

        String sql1 = "SELECT Episodes.name, Episodes.show_id, Shows.name AS show_name, "
                + "Episodes.season, Episodes.number, Episodes.id "
                + "FROM Shows, Episodes "
                + "WHERE Episodes.show_id = Shows.id and Shows.name = ? "
                + "and Episodes.season = ? and Episodes.number = ?";

        if (tmp_show_name == null || tmp_season == null || tmp_number == null) {
            // do nothing
        } else if (tmp_show_name.equalsIgnoreCase("select a show")
                || tmp_season.equalsIgnoreCase("select a season")
                || tmp_number.equalsIgnoreCase("select a number")) {
            
            JOptionPane.showMessageDialog(null, "Please fill in every field.");
        } else {
            
            // perform the deletion if possible (entry exists in DB)
            try (Connection conn = sqlConnection.connect();
                    PreparedStatement pstmt = conn.prepareStatement(sql1)) {

                // set the value
                pstmt.setString(1, tmp_show_name);
                pstmt.setString(2, tmp_season);
                pstmt.setString(3, tmp_number);
                //
                ResultSet rs = pstmt.executeQuery();

                while (rs.next()) {
                    tmp_episode_name = rs.getString("name");
                    tmp_show_id = rs.getString("show_id");
                    //tmp_episode_id = rs.getString("id");
                }
                System.out.println(tmp_episode_name);

            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "The selected episode does not exist!"
                        + " \nPlease check your selections and resubmit.");
            }

            int reply = -1;
            
            // prompt the user to double check before perform the deletion
            if (tmp_episode_name != null) {
                
                reply = JOptionPane.showConfirmDialog(null, "Do you really want to delete "
                        + "the episode " + tmp_episode_name + " from the show "
                        + tmp_show_name + " ?",
                        "Confirmation", JOptionPane.YES_NO_OPTION);
            } else {
                JOptionPane.showMessageDialog(null, "The selected episode does not exist!"
                        + " \nPlease check your selections and resubmit.");
            }

            if (reply == JOptionPane.YES_OPTION) {

                String sql2 = "DELETE FROM Episodes "
                        + "WHERE Episodes.show_id = ? "
                        + "and Episodes.season = ? and Episodes.number = ?";
                try (Connection conn = sqlConnection.connect();
                        PreparedStatement pstmt = conn.prepareStatement(sql2)) {

                    // set the value
                    pstmt.setString(1, tmp_show_id);
                    pstmt.setString(2, tmp_season);
                    pstmt.setString(3, tmp_number);
                    //
                    pstmt.execute();
                    JOptionPane.showMessageDialog(null, "Transaction Completed!"
                            + "\nThe Episode " + tmp_episode_name + " of the show "
                            + tmp_show_name + " is safely deleted.");
                    close();
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(null, "Something went wrong with the deletion.");

                }

            } else {
                // go back to delete window
            }
        }
    }//GEN-LAST:event_button_deleteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DeletionViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DeletionViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DeletionViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DeletionViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DeletionViewer().setVisible(true);
            }
        });
    }
    
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////// populate the combo boxes ////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    private void FillCombo_show_name() {
        String sql = "SELECT id, name, type, language, status, runtime, "
                + " premiered, schedule_day, rating FROM Shows";

        try (Connection conn = sqlConnection.connect();
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery(sql)) {
            
            combo_show_name.removeAllItems();
            combo_show_name.addItem("Select a show");
            
            while (rs.next()) {
                String col_name = rs.getString("name");
                combo_show_name.addItem(col_name);
            }

        } catch (SQLException e) {
            System.out.println(e.getMessage());

        }
    }
    
    private void FillCombo_season() {
        combo_season.removeAllItems();
        combo_season.addItem("Select a season");
                
        for (int i = 1; i <= 21; i++) {
            String tmp = "" + i;
            combo_season.addItem(tmp);
        }
    }
    
    private void FillCombo_number() {
        combo_number.removeAllItems();
        combo_number.addItem("Select a number");
        
        for (int i = 1; i <= 24; i++) {
            String tmp = "" + i;
            combo_number.addItem(tmp);
        }
    }
    
    // close current window
    public void close(){
        WindowEvent winClosingEvent = new WindowEvent(this, WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(winClosingEvent);
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_delete;
    private javax.swing.JComboBox<String> combo_number;
    private javax.swing.JComboBox<String> combo_season;
    private javax.swing.JComboBox<String> combo_show_name;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    // End of variables declaration//GEN-END:variables
}
